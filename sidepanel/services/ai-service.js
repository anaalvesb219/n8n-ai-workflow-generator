// sidepanel/services/ai-service.js
// Servi√ßo para intera√ß√£o com APIs de IA

import { storageService } from './storage-service.js';

/**
 * Classe para gerenciar intera√ß√µes com APIs de IA
 */
export class AIService {
  constructor() {
    this.isInitialized = false;
    this.config = null;
  }

  /**
   * Inicializa o servi√ßo, carregando as configura√ß√µes necess√°rias
   */
  async initialize() {
    if (this.isInitialized) return;
    
    // Carregar configura√ß√µes de API
    this.config = await storageService.getConfig([
      'chatGptApiKey',
      'chatGptModel',
      'visionApiKey',
      'visionApiEndpoint'
    ]);
    
    this.isInitialized = true;
  }

  /**
   * Verifica se as chaves de API est√£o configuradas
   */
  async validateApiKeys() {
    await this.initialize();
    
    const missingKeys = [];
    
    if (!this.config.chatGptApiKey) {
      missingKeys.push('API GPT');
    }
    
    if (!this.config.visionApiKey) {
      missingKeys.push('API Vision');
    }
    
    return {
      valid: missingKeys.length === 0,
      missingKeys
    };
  }

  /**
   * Envia uma mensagem para a API do ChatGPT
   * @param {Array} messages - Array de mensagens para enviar
   */
  async sendChatMessage(messages) {
    await this.initialize();
    
    const validation = await this.validateApiKeys();
    if (!validation.valid) {
      throw new Error(`Chaves de API ausentes: ${validation.missingKeys.join(', ')}`);
    }
    
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.config.chatGptApiKey}`
        },
        body: JSON.stringify({
          model: this.config.chatGptModel || 'gpt-4-1106-preview',
          messages,
          temperature: 0.7,
          max_tokens: 1500
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Erro na API: ${errorData.error?.message || 'Erro desconhecido'}`);
      }
      
      const data = await response.json();
      return data.choices[0].message;
    } catch (error) {
      console.error('Erro ao enviar mensagem para ChatGPT:', error);
      throw error;
    }
  }

  /**
   * Analisa uma p√°gina com base nos dados fornecidos
   * @param {Object} pageData - Dados da p√°gina para an√°lise
   */
  async analyzePage(pageData) {
    const systemPrompt = `
      Voc√™ √© um assistente especializado em automa√ß√£o e workflows n8n. Sua tarefa √© analisar os dados da p√°gina 
      e sugerir workflows de automa√ß√£o adequados. Concentre-se em:
      
      1. Identificar padr√µes comuns como formul√°rios, APIs, tabelas, dashboards
      2. Sugerir automa√ß√µes relevantes para o contexto da p√°gina
      3. Explicar como essas automa√ß√µes poderiam ser implementadas usando n8n
      
      Seja espec√≠fico e forne√ßa exemplos pr√°ticos baseados nos dados observados.
    `;
    
    const pageDescription = JSON.stringify(pageData, null, 2);
    
    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: `Analise esta p√°gina web:\n\n${pageDescription}` }
    ];
    
    return this.sendChatMessage(messages);
  }

  /**
   * Gera um workflow com base nos dados da p√°gina e nas instru√ß√µes do usu√°rio
   * @param {Object} pageData - Dados da p√°gina
   * @param {string} userInstructions - Instru√ß√µes espec√≠ficas do usu√°rio
   */
  async generateWorkflow(pageData, userInstructions) {
    const pageDescription = JSON.stringify(pageData, null, 2);

    const systemPrompt = `
<persona>
Voc√™ √© um arquiteto de automa√ß√£o especialista em n8n com 10 anos de experi√™ncia em:
- Cria√ß√£o de workflows de web scraping e integra√ß√£o
- Otimiza√ß√£o de processos de extra√ß√£o de dados
- Design de automa√ß√µes robustas com tratamento de erros
- Padr√µes de arquitetura para workflows escal√°veis
</persona>

<contexto>
Voc√™ est√° analisando uma p√°gina web para criar um workflow n8n que automatize tarefas baseadas nos elementos detectados. O usu√°rio fornecer√° dados estruturados sobre a p√°gina e instru√ß√µes espec√≠ficas do que deseja automatizar.
</contexto>

<dados_entrada>
${pageDescription}
</dados_entrada>

<instrucoes_usuario>
${userInstructions}
</instrucoes_usuario>

<objetivo>
Criar um workflow n8n completo, v√°lido e import√°vel que:
1. Atenda exatamente √†s necessidades do usu√°rio
2. Seja 85% funcional (necessitando apenas ajustes de credenciais/URLs)
3. Siga as melhores pr√°ticas de design de workflows
4. Inclua tratamento b√°sico de erros
5. Use entre 3-10 n√≥s para manter simplicidade
</objetivo>

<regras_criticas>
## ‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS

### Estrutura do Workflow
- **SEMPRE** incluir campos obrigat√≥rios: id, name, nodes, connections, active, settings
- **SEMPRE** gerar UUIDs v√°lidos no formato: "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
- **SEMPRE** usar typeVersion correto para cada tipo de n√≥
- **SEMPRE** incluir position [x,y] para cada n√≥ com espa√ßamento de 250px

### N√≥s Priorit√°rios (usar sempre que poss√≠vel)
1. **HTTP Request** (typeVersion: 3) - para requisi√ß√µes web
2. **Set** (typeVersion: 1) - para manipular dados
3. **IF** (typeVersion: 1) - para l√≥gica condicional
4. **Schedule Trigger** (typeVersion: 1) - para execu√ß√µes programadas
5. **Function** (typeVersion: 1) - para transforma√ß√µes simples

### Valida√ß√µes
- Cada n√≥ DEVE ter um ID √∫nico
- Conex√µes DEVEM referenciar n√≥s existentes
- JSON DEVE ser v√°lido e bem formatado
- Workflow DEVE ter pelo menos um trigger
</regras_criticas>

<processo_raciocinio>
## üß† Chain of Thought - Processo de Cria√ß√£o

<thinking>
Antes de gerar o workflow, vou analisar:

1. **An√°lise da P√°gina**
   - Que tipo de p√°gina √©? (formul√°rio, listagem, dashboard, etc.)
   - Quais elementos s√£o relevantes para automa√ß√£o?
   - Existem APIs ou endpoints detectados?

2. **Objetivo do Usu√°rio**
   - O que exatamente o usu√°rio quer automatizar?
   - Qual a frequ√™ncia de execu√ß√£o?
   - Onde os dados devem ser enviados?

3. **Arquitetura do Workflow**
   - Qual trigger √© mais adequado?
   - Quais n√≥s s√£o necess√°rios?
   - Como estruturar o fluxo de dados?
   - Onde adicionar tratamento de erros?

4. **Valida√ß√£o Mental**
   - O workflow est√° completo?
   - As conex√µes fazem sentido?
   - Os IDs s√£o √∫nicos?
   - O JSON √© v√°lido?
</thinking>
</processo_raciocinio>

<exemplos_few_shot>
## üìã Exemplos de Refer√™ncia

### Exemplo 1: Web Scraping para Google Sheets
<example>
<scenario>
P√°gina com tabela de produtos, usu√°rio quer extrair dados diariamente
</scenario>
<workflow_structure>
1. Schedule Trigger (di√°rio √†s 9h)
2. HTTP Request (GET na p√°gina)
3. HTML Extract (extrair tabela)
4. Set (formatar dados)
5. Google Sheets (append rows)
6. IF (verificar sucesso)
7. Email Send (notifica√ß√£o)
</workflow_structure>
</example>

### Exemplo 2: Automa√ß√£o de Formul√°rio
<example>
<scenario>
Formul√°rio de contato detectado, enviar para CRM e email
</scenario>
<workflow_structure>
1. Webhook Trigger (receber dados)
2. Set (validar campos)
3. IF (campos v√°lidos?)
4. HTTP Request (enviar para CRM)
5. Send Email (notifica√ß√£o interna)
6. Respond to Webhook (confirma√ß√£o)
</workflow_structure>
</example>
</exemplos_few_shot>

<formato_resposta>
## üì§ Formato de Sa√≠da

Retorne APENAS um JSON v√°lido neste formato:

```json
{
  "description": "Breve descri√ß√£o do que o workflow faz (m√°x 2 linhas)",
  "workflow": {
    "id": "UUID-VALIDO-AQUI",
    "name": "Nome Descritivo do Workflow",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "UUID-UNICO",
        "name": "Nome do N√≥",
        "type": "n8n-nodes-base.tipo",
        "typeVersion": 1,
        "position": [250, 300]
      }
    ],
    "connections": {
      "Nome do N√≥": {
        "main": [
          [
            {
              "node": "Pr√≥ximo N√≥",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    }
  },
  "setup_required": [
    "Configura√ß√£o necess√°ria 1",
    "Configura√ß√£o necess√°ria 2"
  ]
}
```
</formato_resposta>

<validacao_anti_alucinacao>
## üõ°Ô∏è Checklist de Valida√ß√£o

Antes de retornar, verifique:
- [ ] Todos os campos obrigat√≥rios est√£o presentes
- [ ] UUIDs s√£o √∫nicos e v√°lidos
- [ ] Conex√µes referenciam n√≥s existentes
- [ ] N√£o h√° n√≥s √≥rf√£os (desconectados)
- [ ] O trigger est√° presente e configurado
- [ ] JSON √© v√°lido (sem v√≠rgulas extras, aspas corretas)
- [ ] Workflow tem entre 3-10 n√≥s
- [ ] Usa apenas n√≥s est√°veis do n8n (n√£o beta/deprecated)
</validacao_anti_alucinacao>

## üéØ Instru√ß√µes Finais

1. **Analise cuidadosamente** os dados da p√°gina e as instru√ß√µes
2. **Pense passo a passo** usando o processo de racioc√≠nio
3. **Crie um workflow simples e funcional** (n√£o complique demais)
4. **Valide mentalmente** antes de gerar o JSON
5. **Retorne APENAS o JSON** sem explica√ß√µes adicionais

Lembre-se: √â melhor um workflow simples que funciona do que um complexo que falha!
`;

    const messages = [
      { role: 'system', content: systemPrompt }
    ];
    
    const response = await this.sendChatMessage(messages);
    
    // Tentar extrair o JSON da resposta
    try {
      // Se a resposta j√° for JSON, retorn√°-la diretamente
      if (typeof response.content === 'object') return response.content;
      
      // Tentar extrair o bloco JSON da resposta
      const jsonMatch = response.content.match(/```json\n([\s\S]*?)\n```/) || 
                     response.content.match(/```\n([\s\S]*?)\n```/) || 
                     response.content.match(/{[\s\S]*?}/);
                     
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1] || jsonMatch[0]);
      }
      
      throw new Error('N√£o foi poss√≠vel extrair um workflow v√°lido da resposta.');
    } catch (error) {
      console.error('Erro ao processar resposta do workflow:', error);
      throw error;
    }
  }

  /**
   * Analisa um screenshot usando a API Vision
   * @param {string} screenshotDataUrl - Screenshot em formato Data URL
   */
  async analyzeScreenshot(screenshotDataUrl) {
    return new Promise((resolve, reject) => {
      chrome.runtime.sendMessage(
        { action: 'analyzeScreenshot', screenshot: screenshotDataUrl },
        response => {
          if (response && response.success) {
            resolve(response.analysis);
          } else {
            reject(new Error(response?.error || 'Falha na an√°lise da imagem'));
          }
        }
      );
    });
  }
}

// Exportar uma inst√¢ncia √∫nica do servi√ßo
export const aiService = new AIService(); 